{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Radiance Field Studio","text":"<p>Radiance Field Studio is a streamlined and user-friendly codebase crafted for researchers in 3D radiance field, providing intuitive components and APIs for a seamless transition from theory to practical execution of research projects.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation includes these parts:</p> <ul> <li>Installation</li> <li>Quickstart</li> <li>Tutorials</li> <li>API Reference</li> </ul>"},{"location":"#information","title":"Information","text":"<p>The project, initiated by the VCL lab at Peking University in March 2024, is currently under development.</p> <p>For more details, please contact via ye_kai@pku.edu.cn.</p>"},{"location":"#dependencies","title":"Dependencies","text":"<p>The codebase is built on these awesome projects:</p> <ul> <li>tyro: zero-effort CLI interfaces &amp; config objects, from types</li> <li>NerfAcc: a general NeRF acceleration toolbox in PyTorch</li> <li>nerfstudio: a collaboration friendly studio for NeRFs</li> <li>gsplat: CUDA accelerated rasterization of gaussian splatting</li> <li>Rich: a Python library for rich text and beautiful formatting in the terminal</li> <li>gsplat.js: a JavaScript Gaussian Splatting library</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Radiance Field Studio requires <code>python &gt;= 3.10</code> . We recommend using conda to manage dependencies. Make sure to install Conda before proceeding.</p>"},{"location":"installation/#setup-conda-environment","title":"Setup Conda Environment","text":"<pre><code>conda create --name rfstudio -y python=3.10\nconda activate rfstudio\npip install --upgrade pip setuptools\n</code></pre>"},{"location":"installation/#install-pytorch","title":"Install PyTorch","text":"<pre><code>pip install torch==2.0.1 torchvision==0.15.2\npython -c \"import torch; torch.zeros(1).cuda()\" || echo \"ERROR: CUDA check failed\"\n</code></pre>"},{"location":"installation/#install-codebase","title":"Install Codebase","text":"SSHHTTPS <pre><code>git clone git@github.com:PKU-VCL-Geometry/RadianceFieldStudio.git\ncd RadianceFieldStudio\npip install -e .\n</code></pre> <pre><code>git clone https://github.com/PKU-VCL-Geometry/RadianceFieldStudio.git\ncd RadianceFieldStudio\npip install -e .\n</code></pre>"},{"location":"installation/#setup-editor-extensions-optional","title":"Setup Editor Extensions [Optional]","text":"VSCode <ul> <li> <p>Ext:Python</p> <p>Support IntelliSense (Pylance) and code navigation.</p> </li> <li> <p>Ext:Ruff</p> <p>Support auto-imports, document formatting and linter.</p> </li> </ul>"},{"location":"quickstart/","title":"Quickstart","text":"<p>We are going to start from a simple example with the scene <code>data/nerf_synthetic/lego</code> , where a 3D Gaussian Splatting model will be trained, tested, exported and visualized. You can find code from RadianceFieldStudio/examples/quickstart .</p>"},{"location":"quickstart/#1-create-work-space","title":"1. Create Work Space","text":"<p>As RadianceFieldStudio have been installed as a package, we start from an empty project. Just make a new directory named <code>Quickstart</code> anywhere as our work space.</p> <pre><code>mkdir Quickstart\ncd Quickstart\n</code></pre>"},{"location":"quickstart/#2-data-preparation","title":"2. Data Preparation","text":"<p>Copy the download URL from NeRF example data. The URL should start with <code>https://drive.usercontent.google.com/download?</code> .</p> Download &amp; Unzip<pre><code>mkdir data\nwget \"https://drive.usercontent.google.com/download?...\" -O data/example.zip\nunzip data/example.zip -d data\nrm data/example.zip\n</code></pre> <p>You will get two scene now: <code>data/nerf_llff_data/fern</code> and <code>data/nerf_synthetic/lego</code> .</p>"},{"location":"quickstart/#3-train-a-3dgs","title":"3. Train a 3DGS","text":"<p>Create a train script named <code>train.py</code> : (1)</p> <ol> <li>You can also find the code at RadianceFieldStudio/examples/quickstart/01_train_3dgs.py .</li> </ol> train.py<pre><code>from rfstudio.data import VanillaDataset\nfrom rfstudio.engine.cli import cli_from_task\nfrom rfstudio.engine.trainer import ExperimentDumper, TrainerConfig, VanillaTrainer\nfrom rfstudio.model import GaussianSplatting\nfrom rfstudio.model.components.renderer import GaussianRasterizer\n\nstd_trainer = VanillaTrainer(\n    dataset=VanillaDataset(\n        path=...,\n    ),\n    model=GaussianSplatting(\n        renderer=GaussianRasterizer(background_color='black'),\n        sh_degree=0\n    ),\n    experiment=ExperimentDumper(name=...),\n    train=TrainerConfig(\n        num_steps=30000,\n        batch_size=1,\n        lr=1e-3,\n        eps=1e-15,\n        lr_decay=0.01,\n        max_norm=None,\n        num_steps_per_display=100,\n        num_steps_per_val=300,\n        num_steps_per_save=6000,\n        mixed_precision=False\n    ),\n    cuda=0,\n    seed=1\n)\n\nif __name__ == '__main__':\n    cli_from_task(std_trainer)\n</code></pre> <p>Then, run the script in your terminal and you can watch progress from the terminal</p> In the Terminal<pre><code>python train.py \\\n    --dataset.path data/nerf_synthetic/lego \\\n    --experiment.name testing\n</code></pre> <p></p>"},{"location":"quickstart/#4-check-training-results","title":"4. Check Training Results","text":"<p>After training for ~5min, the task will be done and you can use Ctrl+C to exit.</p> <p>The related training results will be dumped at <code>outputs/testing/${timestamp}</code> :</p> <ul> <li> <p>Checkpoints: Model weights are saved at <code>outputs/testing/${timestamp}/ckpts</code> .</p> </li> <li> <p>Validation: novel views as well as their ground truth are rendered at <code>outputs/testing/${timestamp}/dump/val</code> .</p> </li> <li> <p>Log: training details will be logged at <code>outputs/testing/${timestamp}/log.txt</code> .</p> </li> <li> <p>Arguments: training arguments will be automatically generated at <code>outputs/testing/${timestamp}/task.py</code> . (1) </p> <ol> <li> <p>It enables you to rerun an experiment with the completely same arguments, simply by:</p> <pre><code>python outputs/testing/${timestamp}/task.py\n</code></pre> </li> </ol> </li> </ul>"},{"location":"quickstart/#5-write-your-first-script","title":"5. Write Your First Script","text":"<p>In section 3, we have cloned an existing train script without understanding how the script works. We are now going to write our own script from scratch.</p>"},{"location":"quickstart/#51-hello-world","title":"5.1 Hello World","text":"<p>Create another script named <code>test.py</code> and start with <code>Hello World</code> :</p> test.pyRun &amp; Results <pre><code>def run():\n    print('Hello World!')\n\nif __name__ == '__main__':\n    run()\n</code></pre> <pre><code>$ python test.py\nHello World!\n</code></pre>"},{"location":"quickstart/#52-start-from-task","title":"5.2 Start From Task","text":"<p>The above script succeed in executing the main function <code>run</code> . Similarly, Radiance Field Studio abstracts any executable script into a <code>Task</code> class, which always has a <code>run</code> method as the entry point of the script. Users need to import the <code>Task</code> class as a base class and override its <code>run</code> method through inheritance:</p> test.pyRun &amp; Results <pre><code>from rfstudio.engine.cli import cli_from_task\nfrom rfstudio.engine.task import Task\n\n\nclass Tester(Task):\n    def run(self) -&gt; None:\n        print('Hello World!')\n\n\nif __name__ == '__main__':\n    tester = Tester()\n    cli_from_task(tester)\n</code></pre> <pre><code>$ python test.py\nHello World!\n</code></pre>"},{"location":"quickstart/#53-cli-support","title":"5.3 CLI Support","text":"<p>One of the advantages of doing this is that Radiance Field Studio provides convenient command-line support based on tyro. Users need to use the dataclass decorator to add fields to this class, after which these fields will be automatically recognized:</p> test.pyRun &amp; Results <pre><code>from dataclasses import dataclass\n\nfrom rfstudio.engine.cli import cli_from_task\nfrom rfstudio.engine.task import Task\n\n\n@dataclass                     # dataclass decorator is a must\nclass Tester(Task):\n\n    num_a: int = ...           # ellipsis means \"required\"\n    num_b: int = 6             # default value is 6\n    num_c: int = ...           # ellipsis means \"required\"\n    info: str = 'Hello World!' # default value is 'Hello World!'\n\n    def run(self) -&gt; None:\n        print(self.info)       # use self.${field} to access any field\n        print(f'{self.num_a + self.num_b + self.num_c = }')\n\n\nif __name__ == '__main__':\n    tester = Tester()\n    cli_from_task(tester)\n</code></pre> <pre><code>$ python test.py -h\nusage: test.py [-h] [OPTIONS]\n\n\u256d\u2500 options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 -h, --help              show this help message and exit                           \u2502\n\u2502 --seed {None}|INT       (default: None)                                           \u2502\n\u2502 --cuda {None}|INT       (default: None)                                           \u2502\n\u2502 --num-a INT             ellipsis means \"required\" (required)                      \u2502\n\u2502 --num-b INT             default value is 6 (default: 6)                           \u2502\n\u2502 --num-c INT             ellipsis means \"required\" (required)                      \u2502\n\u2502 --info STR              default value is 'Hello World!' (default: 'Hello World!') \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n$ python test.py --num-a 1 --num-c 3\nHello World!\nself.num_a + self.num_b + self.num_c = 10\n$ python test.py --num-a 1 --num-c 3 --num-b 9 --info \"Good Morning\\!\"\nGood Morning!\nself.num_a + self.num_b + self.num_c = 13\n</code></pre>"},{"location":"quickstart/#54-edit-argument","title":"5.4 Edit Argument","text":"<p>Before we pass <code>tester</code> object to <code>cli_from_task</code> API, it is possible for us to dynamically modify the arguments:</p> test.pyRun &amp; Results <pre><code>if __name__ == '__main__':\n    tester = Tester(num_c=9, info=...)\n    cli_from_task(tester)\n</code></pre> <pre><code>$ python test.py -h\nusage: test.py [-h] [OPTIONS]\n\n\u256d\u2500 options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 -h, --help              show this help message and exit            \u2502\n\u2502 --seed {None}|INT       (default: None)                            \u2502\n\u2502 --cuda {None}|INT       (default: None)                            \u2502\n\u2502 --num-a INT             ellipsis means \"required\" (required)       \u2502\n\u2502 --num-b INT             default value is 6 (default: 6)            \u2502\n\u2502 --num-c INT             ellipsis means \"required\" (default: 9)     \u2502\n\u2502 --info STR              default value is 'Hello World!' (required) \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"quickstart/#55-task-components","title":"5.5 Task Components","text":"<p>Radiance Field Studio provides a series of components for <code>Task</code> to use. For example, a useful component <code>ExperimentLoader</code> is used to deserialize <code>Task</code> object from <code>outputs/testing/${timestamp}/task.py</code> . We can use it to build a simple tester.</p> test.pyRun &amp; Results train.py<pre><code>from dataclasses import dataclass\n\nfrom rfstudio.engine.cli import cli_from_task\nfrom rfstudio.engine.task import Task\nfrom rfstudio.engine.task_components import ExperimentLoader\nfrom rfstudio.engine.trainer import VanillaTrainer\nfrom rfstudio.model import GaussianSplatting\n\n\n@dataclass\nclass Tester(Task):\n\n    experiment: ExperimentLoader = ExperimentLoader(dir=...)\n\n    def run(self) -&gt; None:\n        trainer = self.experiment.load()\n        assert isinstance(trainer, VanillaTrainer)\n        model = trainer.model\n        assert isinstance(model, GaussianSplatting)\n        model.setup(self.device)\n        model.load_checkpoint(trainer.ckpt_path)\n        print(f'#Gaussians = {model.gaussians.shape[0]}')\n\n\nif __name__ == '__main__':\n\n    cli_from_task(Tester(cuda=0))\n</code></pre> <pre><code>$ python test.py --experiment.dir ./outputs/testing/${timestamp}\n#Gaussians = 116590\n</code></pre> <p>In summary, the behavior of a task component is just similiar to that of any other field. The <code>Tester</code> have some components or fields, which can either store values or implements some functions.</p> train.py<pre><code>@dataclass\nclass Tester(Task):\n\n    experiment: ExperimentLoader = ExperimentLoader(dir=...)\n\n    def run(self) -&gt; None:\n        trainer = self.experiment.load()\n        assert isinstance(trainer, VanillaTrainer)\n</code></pre> <p>Such a coding philosophy is called \"composition\". Instead of excessive inheritance, Radiance Field Studio prefers composition and interfaces, believing it brings more clean, easy-to-use and flexible APIs.</p>"},{"location":"quickstart/#6-test-your-model","title":"6. Test Your Model","text":"<p>Rewrite <code>test.py</code> for pretrained model testing: (1)</p> <ol> <li>You can also find the code at RadianceFieldStudio/examples/quickstart/02_test_3dgs.py .</li> </ol> test.py<pre><code>from dataclasses import dataclass\n\nimport numpy as np\nimport torch\n\nfrom rfstudio.engine.cli import cli_from_task\nfrom rfstudio.engine.task import Task\nfrom rfstudio.engine.task_components import ExperimentLoader\nfrom rfstudio.engine.trainer import VanillaTrainer\nfrom rfstudio.model import GaussianSplatting, TrainInfo\n\n\n@dataclass\nclass Tester(Task):\n\n    experiment: ExperimentLoader = ExperimentLoader(dir=...)\n\n    def run(self) -&gt; None:\n        trainer = self.experiment.load()\n        assert isinstance(trainer, VanillaTrainer)\n        model = trainer.model\n        assert isinstance(model, GaussianSplatting)\n        dataset = trainer.dataset\n        model.setup(self.device)\n        model.load_checkpoint(path=trainer.ckpt_path)\n\n        with torch.no_grad():\n            model.set_train_mode(False)\n            losses = []\n            psnrs = []\n            for inputs, gt_outputs, indices, size in dataset.get_loader(\n                split='test',\n                device=self.device,\n                batch_size=trainer.train.batch_size,\n                shuffle=False,\n                infinite=False,\n                lazy=False\n            ):\n                train_info = TrainInfo(\n                    is_training=False,\n                    optimizers=None,\n                    dump_path=None,\n                    curr_step=None,\n                    total_step=None,\n                    dataset_indices=indices,\n                    dataset_size=size\n                )\n                metrics = model.get_train_metrics(inputs, gt_outputs, train_info)\n                losses.append(metrics['loss'].item())\n                psnrs.append(metrics['psnr'].item())\n            print(\"Eval: loss={:.5f} psnr={:.3f}\".format(np.mean(losses), np.mean(psnrs)))\n\nif __name__ == '__main__':\n\n    cli_from_task(Tester(cuda=0))\n</code></pre> <p>Run the script and the results are:</p> <pre><code>Eval: loss=0.01009 psnr=33.638\n</code></pre>"},{"location":"quickstart/#7-visualize-3dgs","title":"7. Visualize 3DGS","text":"<p>Create another script named <code>visualize.py</code> for visualization: (1)</p> <ol> <li>You can also find the code at RadianceFieldStudio/examples/quickstart/03_visualize_3dgs.py .</li> </ol> test.py<pre><code>from dataclasses import dataclass\n\nfrom rfstudio.engine.cli import cli_from_task\nfrom rfstudio.engine.task import Task\nfrom rfstudio.engine.task_components import ExperimentLoader\nfrom rfstudio.engine.trainer import VanillaTrainer\nfrom rfstudio.model import GaussianSplatting\nfrom rfstudio.visualization import vis_3dgs\n\n\n@dataclass\nclass Vis3DGS(Task):\n\n    experiment: ExperimentLoader = ExperimentLoader(dir=...)\n\n    def run(self) -&gt; None:\n        trainer = self.experiment.load()\n        assert isinstance(trainer, VanillaTrainer)\n        model = trainer.model\n        assert isinstance(model, GaussianSplatting)\n        model.setup(self.device)\n        model.load_checkpoint(path=trainer.ckpt_path)\n        vis_3dgs(model)\n\n\nif __name__ == '__main__':\n    cli_from_task(Vis3DGS())\n</code></pre> <p>Then, you can visualize 3DGS in the interactive web viewer.</p>"},{"location":"reference/","title":"Overview","text":""},{"location":"reference/anything/","title":"Anything","text":""},{"location":"reference/anything/#some","title":"some","text":""},{"location":"tutorials/","title":"Tutorials","text":""}]}